*batteries.txt*                                Ergonomic Neovim Lua bindings.

                                      Type |gO| to see the table of contents.

=============================================================================
                                                            *batteries.nvim*

The primary way to use |batteries.nvim| is to |lua-require| it: >
    require("batteries")
<
The returned module (table) contains the following functions/fields:

cmd({def})			                           *batteries.cmd()*

    Define a command (|user-commands|). See |command-attributes| for the
    arguments available here. Examples: >
      require("batteries").cmd {
        range = true,
        nargs = 0,
        "Browse",
        "<line1>,<line2>OpenGithubFile",
      }

      require("batteries").cmd {
        nargs = "?",
        complete = "filetype",
        "EditFtplugin",
        "call misc#EditFtplugin(<f-args>)",
      }
<

    Parameters: ~
        {def}   table Command definition. Has the following keys:
                • 1: (string) The command's name. For example, `"Browse"` to
                  define `:Browse`.
                • 2: (string) The replacement text. (See "Replacement text" in
                  |map.txt|)

                • nargs: (string|number) One of 0, 1, "*", "?", or "+".
                  See |:command-nargs|.
                • complete: (string) See |:command-complete|.
                • range: (string|number) One of true (`-range`), "%", or a
                  number (`-range=N`). See |:command-range|.
                • count: (number) See |:command-range|. Mutually exclusive
                  with `range`.
                • addr: (string) One of "lines", "arguments", "buffers",
                  "loaded_buffers", "windows", "tabs", "quickfix", or "other".
                  See |:command-addr|.
                • bang: (boolean) Command can take a ! modifier.
                  See |:command-bang|.
                • bar: (boolean) Command can be followed by a | and another
                  command. See |:command-bar|.
                • register: (boolean) The first argument to the command can be
                  a register name. See |:command-register|.
                • buffer: (boolean) Make the mapping buffer-local. See
                  |:command-buffer|. Note that this can only be a boolean; I
                  have no clue how to make a command local to a particular
                  buffer (rather than simply the current buffer).
                • keepscript: (boolean) Use the invoked location for error
                  messages. See |:command-keepscript|.


map({maps})					           *batteries.map()*

    Define a key mapping; see |map.txt| for an introduction. |batteries.map()|
    supports several forms: >
      -- :nnoremap <silent> <Leader>og <Cmd>Browse<CR>
      require("batteries").map {
        -- When I hit `\og`...
        "<Leader>og",
	-- Execute the `:Browse` command.
        "<Cmd>Browse<CR>",
	-- Set a description:
        "Open file on GitHub",
      }

      -- Define multiple mappings with a common prefix together:
      require("batteries").map {
        prefix = "<Leader>",
        { "t", "<Cmd>Telescope<CR>", "Telescope" },
	-- Buffer local mapping:
        { "f", "<Cmd>Telescope find_files<CR>", "Find files", buffer = 3 },
	{ mode = "i", ",,", "<ESC>", 
      }
<
    Mostly, |batteries.map()| forwards to |nvim_set_keymap()| and
    |nvim_buf_set_keymap()|, so see documentation for those functions and
    |:map-arguments| for more
    detail.

    The following definitions are all equivalent: >
      require("batteries").map {
	prefix = "<Leader>f",
	name = "+file",
	{ "f", "<Cmd>Telescope find_files<CR>", "Find file" },
	{ "r", "<Cmd>Telescope oldfiles<CR>", "Open recent file" },
	{ "n", "<Cmd>enew<CR>", "New file" },
      }

      require("batteries").map {
	{ prefix = "<Leader>f", name = "+file" },
	{ "<Leader>ff", "<Cmd>Telescope find_files<CR>", "Find file" },
	{ "<Leader>fr", "<Cmd>Telescope oldfiles<CR>", "Open recent file" },
	{ "<Leader>fn", "<Cmd>enew<CR>", "New file" },
      }
<
    Parameters: ~
	{maps}	table Mapping or mappings to define. A mapping has the
		following keys:
		• 1: (string) Left-hand side {lhs} of the mapping.
		• 2: (string|function) Right-hand side {rhs} of the mapping.
		  If a function, used as the `callback` key for
		  |nvim_set_keymap()|.
		• 3: (string) If present, used as the description of the
		  binding.
		• desc: (string) If present, used as the description of the
		  binding.

		• prefix: (string) Prefix to the {lhs} of the mapping; mostly
		  useful when defining multiple mappings at once.
		• mode: (string|table) Mode or list of modes to define the
		  mapping in, defaults to `"n"` if not given.
		• buffer: (number) Buffer number to define the mapping in, or
		  leave blank for a global mapping.
		• expr: (boolean) If true, sets |:map-<expr>|.
		• nowait: (boolean) If true, sets |:map-<nowait>|.
		• noremap: (boolean) If true, the mapping is non-recursive
		  (see |recursive_mapping|). Opposite of `remap`. If the {rhs}
		  starts with `<Plug>`, this defaults to false.
		• remap: (boolean) If true, the mapping is recursive.
		• script: (boolean) If true, sets |:map-<script>|
		• silent: (boolean) Default true. If true, sets
		  |:map-<silent>|.
		• unique: (boolean) If true, sets |:map-<unique>|.

		• name: (string) If set, registers the `prefix` key with the
		  given name as a |which-key.nvim| prefix.
		  See: https://github.com/folke/which-key.nvim

		If multiple mappings are specified, any of the above keys can
		be specified at any level and overridden in nested mappings;
		prefixes are concatenated.

tbl_pick({t}, {keys})                                   *batteries.tbl_pick()*

    Pick out a subset of keys from a table. Example: >
        require("batteries").tbl_pick(
            { hot = "dog", ham = "burger" },
            { "hot" }
        )
        -- { hot = "dog" }
<
    Note that the keys to pick out can be integers for list indexing!

    Parameters: ~
        {t}     table Input table to pick keys from.
        {keys}  table A list-like table of keys to include in the returned
                table.

    Returns: ~
        A new table (with no metatable) including only the keys in {keys}.

 vim:tw=78:ts=8:noet:ft=help:norl:
